class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n=heights.length;
        int m=heights[0].length;
        int[][] dis=new int[n][m];
        for(int i=0;i<n;i++){
            Arrays.fill(dis[i],Integer.MAX_VALUE);
        }
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.add(new int[]{0,0,0}); //i,j,dis
        dis[0][0]=0;
        int[][] dir={{-1,0},{0,-1},{1,0},{0,1}};
        while(!pq.isEmpty()){
            int[] arr=pq.poll();
            int i=arr[0];
            int j=arr[1];
            int currDis=arr[2];
        for(int d=0;d<dir.length;d++){
            int newi=i+dir[d][0];
            int newj=j+dir[d][1];
            if(newi>=0 && newi<n && newj>=0 && newj<m){
                int newDis=Math.max(Math.abs(heights[newi][newj]-heights[i][j]),currDis);
                if(dis[newi][newj]>newDis){
                    dis[newi][newj]=newDis;
                    pq.add(new int[]{newi,newj,newDis});
                }
            }
        }

        }

        return dis[n-1][m-1];
    }
}
